if (clients[i].etat==MENU){
                     if (strcmp(buffer, "LISTE") == 0) {
                        char client_list[BUF_SIZE];
                        list_clients(clients, actual, client_list);
                        strncat(client_list,"\n", BUF_SIZE - strlen(client_list) - 1);
                        write_client(client.sock, client_list);
                        choisir_option(clients[i]);
                     }
                     else if (strcmp(buffer, "PARTIE") == 0) {
                        strncpy(buffer, "ALEATOIRE ou CHOISIR adversaire ?", BUF_SIZE - 1);
                        write_client(client.sock, buffer);
                        read_client(clients[i].sock, buffer);
                        int found = 0;
                        if (strcmp(buffer, "ALEATOIRE") == 0) {
                           for (int j = 0; j < actual; j++) {
                              if (clients[j].etat == MENU && clients[j].sock != clients[i].sock) {
                                 found = 1;
                                 /*int choix = choix_partie(clients[i],clients[j], clients, actual,buffer);
                                 if(!choix){
                                    break;
                                 }*/
                                
                                Partie* partie = init_partie(clients[i].name, clients[j].name);
                                parties_en_cours[actual_partie] = partie;
                                clients[i].num_partie = actual_partie;
                                clients[j].num_partie = actual_partie;
                                partie->client_1 = i;
                                partie->client_2 = j;

                                actual_partie++;
                                sauvegarder_partie("Data/sauvegardes.csv",partie);
                                
                                if (!strcmp(partie->joueur_actuel->pseudo, clients[i].name)){
                                    strncpy(buffer, "C'est à toi de jouer !\n", BUF_SIZE - 1);
                                    write_client(clients[i].sock, buffer);
                                    strncpy(buffer, "L'adversaire commence!\n", BUF_SIZE - 1);
                                    write_client(clients[j].sock, buffer);
                                    clients[i].etat = PARTIE_TOUR;
                                    clients[j].etat = PARTIE_ATTENTE;
                                }
                                else{
                                    strncpy(buffer, "C'est à toi de jouer !\n", BUF_SIZE - 1);
                                    write_client(clients[j].sock, buffer);
                                    strncpy(buffer, "L'adversaire commence !\n", BUF_SIZE - 1);
                                    write_client(clients[i].sock, buffer);
                                    clients[j].etat = PARTIE_TOUR;
                                    clients[i].etat = PARTIE_ATTENTE;
                                }
                                afficher_plateau(buffer_plateau, BUF_SIZE, partie->plateau, partie->joueur1->score, partie->joueur1->pseudo, partie->joueur2->score, partie->joueur2->pseudo);
                                write_client(clients[i].sock, buffer_plateau);
                                write_client(clients[j].sock, buffer_plateau);
                                break; 

                              }
                           }
                           if (!found) {
                              strncpy(buffer, "Aucun joueur disponible pour une partie.\n", BUF_SIZE - 1);
                              write_client(client.sock, buffer);
                              choisir_option(clients[i]);
                           }
                           
                           break;
                           
                        }else if (strcmp(buffer, "CHOISIR") == 0) {
                           
                           char client_dispos_list[BUF_SIZE];
                           list_clients_dispos(clients[i], clients, actual, client_dispos_list);
                           strncat(buffer,"\n", BUF_SIZE - strlen(client_dispos_list) - 1);
                           write_client(client.sock, client_dispos_list);
                           read_client(clients[i].sock,buffer);
                           for(int j = 0; j < actual; j++){
                              if(!strcmp(clients[j].name,buffer)){
                                 choix_partie(clients[i],clients[j],clients,actual,buffer);
                                 found = 1;
                                 break;
                              }
                           }
                           if (!found) {
                                 strncpy(buffer, "Aucun joueur libre correspondant.\n", BUF_SIZE - 1);
                                 write_client(client.sock, buffer);
                                 choisir_option(clients[i]);
                              }
                           
                        }else{
                           write_client(clients[i].sock,"Choix indisponible, retou au menu\n");
                           choisir_option(clients[i]);
                        }
                     }else {
                        //send_message_to_all_clients(clients, client, actual, buffer, 0);
                        write_client(clients[i].sock,"Choix indisponible\n");
                        choisir_option(clients[i]);
                     }
                  }